package com.neverrar.datacloudplatform.backend.controller;

import com.neverrar.datacloudplatform.backend.error.*;
import com.neverrar.datacloudplatform.backend.model.Project;
import com.neverrar.datacloudplatform.backend.model.Task;
import com.neverrar.datacloudplatform.backend.model.User;
import com.neverrar.datacloudplatform.backend.repository.ProjectRepository;
import com.neverrar.datacloudplatform.backend.repository.TaskRepository;
import com.neverrar.datacloudplatform.backend.repository.UserRepository;
import com.neverrar.datacloudplatform.backend.util.Request;
import com.neverrar.datacloudplatform.backend.util.Result;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Date;
import java.util.Optional;
import java.util.Set;

@Controller // This means that this class is a Controller
@RequestMapping(path="/tasks") // This means URL's start with /demo (after Application path)
public class TaskController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private StringRedisTemplate template;

    @Autowired
    private ProjectRepository projectRepository;

    @Autowired
    private TaskRepository taskRepository;

    @PostMapping // Map ONLY POST Requests
    public @ResponseBody
    Result<String> addNewTask (@RequestBody  Request<Task> request) {
        String userId=template.opsForValue().get(request.getSessionId());
        if(userId==null)  return Result.wrapErrorResult(new InvalidSessionIdError());
        Optional<Project> optionalProject=projectRepository.findById(request.getData().getProject());
        if(!optionalProject.isPresent()) return Result.wrapErrorResult(new ProjectNotExistedError());
        if(!optionalProject.get().getOwner().equals(userId))
            return Result.wrapErrorResult(new PermissionDeniedError());
        Task task=request.getData();
        User user=new User();
        user.setId(userId);
        task.setOwner(user);
        task.setTestCount(0);
        task.setId(null);
        task.setProject(optionalProject.get());
        taskRepository.save(task);
        return Result.wrapSuccessfulResult("Saved");
    }

    @GetMapping("/{id}")
    public @ResponseBody Result<Task> getTask (@RequestParam String sessionId,@PathVariable Integer id) {
        String userId=template.opsForValue().get(sessionId);
        if(userId==null)  return Result.wrapErrorResult(new InvalidSessionIdError());
        Optional<Task> optionalTask= taskRepository.findById(id);
        if(!optionalTask.isPresent()) return Result.wrapErrorResult(new ProjectNotExistedError());
        if(!userId.equals(optionalTask.get().getOwner())) return Result.wrapErrorResult(new PermissionDeniedError());
        return Result.wrapSuccessfulResult(optionalTask.get());
    }

    @GetMapping
    public @ResponseBody Result<Set<Task>> getAllTask (@RequestParam String sessionId,@RequestParam Integer projectId) {
        String userId=template.opsForValue().get(sessionId);
        if(userId==null)  return Result.wrapErrorResult(new InvalidSessionIdError());
        Optional<Project> optionalProject=projectRepository.findById(projectId);
        if(!optionalProject.isPresent()) return Result.wrapErrorResult(new ProjectNotExistedError());
        if(!optionalProject.get().getOwner().equals(userId))
            return Result.wrapErrorResult(new PermissionDeniedError());
        return Result.wrapSuccessfulResult(optionalProject.get().getTaskSet());
    }

    @PutMapping("/{id}")
    public @ResponseBody Result<Task> updateTask (@RequestBody Request<Task> request, @PathVariable Integer id) {
        String userId=template.opsForValue().get(request.getSessionId());
        if(userId==null)  return Result.wrapErrorResult(new InvalidSessionIdError());
        Optional<Task> optionalTask=taskRepository.findById(id);
        if(!optionalTask.isPresent()) return Result.wrapErrorResult(new TaskNotExistedError());
        if(!optionalTask.get().getOwner().equals(userId))
            return Result.wrapErrorResult(new PermissionDeniedError());
        Task task=request.getData();
        task.setId(id);
        task.setTestCount(optionalTask.get().getTestCount());
        Project project=new Project();
        project.setId(optionalTask.get().getProject());
        task.setProject(project);
        User user=new User();
        user.setId(userId);
        task.setOwner(user);
        taskRepository.save(task);
        return Result.wrapSuccessfulResult(task);
    }


    @DeleteMapping(path="/{id}")
    public @ResponseBody Result<String> invalidateSessionId(@RequestParam String sessionId,@PathVariable Integer id) {
        String userId=template.opsForValue().get(sessionId);
        if(userId==null)  return Result.wrapErrorResult(new InvalidSessionIdError());
        Optional<Task> optionalTask=taskRepository.findById(id);
        if(!optionalTask.isPresent()) return Result.wrapErrorResult(new TaskNotExistedError());
        if(!optionalTask.get().getOwner().equals(userId))
            return Result.wrapErrorResult(new PermissionDeniedError());
        taskRepository.delete(optionalTask.get());
        return Result.wrapSuccessfulResult("Deleted");
    }
}
