package com.neverrar.datacloudplatform.backend.controller;

import com.neverrar.datacloudplatform.backend.model.User;
import com.neverrar.datacloudplatform.backend.repository.UserRepository;
import com.neverrar.datacloudplatform.backend.util.HashHelper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;
import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.TimeUnit;

@Controller // This means that this class is a Controller
@RequestMapping(path="/users") // This means URL's start with /demo (after Application path)
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private StringRedisTemplate template;

    @PostMapping(path="/register") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestBody User user) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Optional<User> opt=userRepository.findById(user.getId());
        if(opt.isPresent()) return "ID already exists!";

        User n = new User();
        n.setUsername(user.getName());
        n.setPassword(HashHelper.computeSha256Hash(user.getPassword()));
        n.setId(user.getId());
        n.setRole(0);
        userRepository.save(n);
        return "Saved";
    }

    @PostMapping(path="/login")
    public @ResponseBody String getLoginToken(@RequestBody User user) {

        String sessionId;
        Optional<User> opt=userRepository.findById(user.getId());
        if(!opt.isPresent()) return "ID is not exists!";
        String passwordHashed=HashHelper.computeSha256Hash(user.getPassword());
        if(!opt.get().getPassword().equals(passwordHashed)) return "Wrong password!";
        double seed=ThreadLocalRandom.current().nextDouble();
        sessionId=HashHelper.computeMD5Hash(user.getId()+ seed);
        if(sessionId==null) return "SessionId is null!";
        template.opsForValue().set(sessionId,user.getId(),3, TimeUnit.HOURS);
        return sessionId;
    }

    @DeleteMapping(path="/logout")
    public @ResponseBody String invalidateSessionId(@RequestParam String sessionId) {
        String id=template.opsForValue().get(sessionId);
        if(id==null) return "SessionId is invalid!";
        template.delete(sessionId);
        return id+" Log out!";
    }
}
