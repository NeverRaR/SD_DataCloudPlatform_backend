package com.neverrar.datacloudplatform.backend.controller;

import com.neverrar.datacloudplatform.backend.error.*;
import com.neverrar.datacloudplatform.backend.model.User;
import com.neverrar.datacloudplatform.backend.repository.UserRepository;
import com.neverrar.datacloudplatform.backend.util.HashHelper;
import com.neverrar.datacloudplatform.backend.util.Result;
import com.neverrar.datacloudplatform.backend.view.UserInformation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;
import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.TimeUnit;

@Controller // This means that this class is a Controller
@RequestMapping(path="api/users") // This means URL's start with /demo (after Application path)
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private StringRedisTemplate template;

    @PostMapping // Map ONLY POST Requests
    public @ResponseBody
    Result<String> addNewUser (@RequestBody User user) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        Result<User> result=new Result<>();
        Optional<User> opt=userRepository.findById(user.getId());
        if(opt.isPresent()) return Result.wrapErrorResult(new UserAlreadyExistedError());
        User n = new User();
        n.setNickname(user.getNickname());
        double seed=ThreadLocalRandom.current().nextDouble();
        n.setSalt(HashHelper.computeSha256Hash(user.getId()+ seed));
        n.setPassword(HashHelper.computeSha256Hash(user.getPassword()+n.getSalt()));
        n.setId(user.getId());
        n.setRole(0);
        userRepository.save(n);
        return Result.wrapSuccessfulResult("Saved");
    }

    @GetMapping
    public @ResponseBody
    Result<UserInformation> getUser (@RequestParam String sessionId) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        String id=template.opsForValue().get(sessionId);
        if(id==null) return Result.wrapErrorResult(new InvalidSessionIdError());
        Optional<User>  optionalUser=userRepository.findById(id);
        if(!optionalUser.isPresent()) return Result.wrapErrorResult(new UserNotExistedError());
        return Result.wrapSuccessfulResult(new UserInformation(optionalUser.get()));
    }

    @PostMapping(path="/session")
    public @ResponseBody Result<String> getLoginToken(@RequestBody User user) {

        String sessionId;
        Optional<User> opt=userRepository.findById(user.getId());
        if(!opt.isPresent()) return Result.wrapErrorResult(new UserNotExistedError());
        String passwordHashed=HashHelper.computeSha256Hash(user.getPassword()+opt.get().getSalt());
        if(!opt.get().getPassword().equals(passwordHashed)) return Result.wrapErrorResult(new WrongPasswordError());
        double seed=ThreadLocalRandom.current().nextDouble();
        sessionId=HashHelper.computeMD5Hash(user.getId()+ seed);
        if(sessionId==null) return Result.wrapErrorResult(new NullError());
        template.opsForValue().set(sessionId,user.getId(),3, TimeUnit.HOURS);
        return Result.wrapSuccessfulResult(sessionId);
    }

    @DeleteMapping(path="/session")
    public @ResponseBody Result<String> invalidateSessionId(@RequestParam String sessionId) {
        String id=template.opsForValue().get(sessionId);
        if(id==null) return Result.wrapErrorResult(new InvalidSessionIdError());
        template.delete(sessionId);
        return Result.wrapSuccessfulResult("logout!");
    }
}
