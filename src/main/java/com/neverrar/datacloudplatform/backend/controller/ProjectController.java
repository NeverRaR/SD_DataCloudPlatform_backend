package com.neverrar.datacloudplatform.backend.controller;

import com.neverrar.datacloudplatform.backend.model.Project;
import com.neverrar.datacloudplatform.backend.model.User;
import com.neverrar.datacloudplatform.backend.repository.ProjectRepository;
import com.neverrar.datacloudplatform.backend.repository.UserRepository;
import com.neverrar.datacloudplatform.backend.request.ProjectRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Date;
import java.util.Optional;

@Controller // This means that this class is a Controller
@RequestMapping(path="/projects") // This means URL's start with /demo (after Application path)
public class ProjectController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private StringRedisTemplate template;

    @Autowired
    private ProjectRepository projectRepository;

    @PostMapping // Map ONLY POST Requests
    public @ResponseBody String addNewProject (@RequestBody ProjectRequest request) {
        String userId=template.opsForValue().get(request.getSessionId());
        if(userId==null)  return "SessionId is invalid!";
        Optional<User> optionalUser=userRepository.findById(userId);
        if(!optionalUser.isPresent()) return "User isn't exists!";
        Date date=new Date();
        Project project=request.getProject();
        project.setCreateTime(date);
        project.setLastModified(date);
        project.setOwner(optionalUser.get());
        projectRepository.save(project);
        return "Saved";
    }

    @GetMapping("/{id}")
    public @ResponseBody String getProject (@RequestBody ProjectRequest request,@PathVariable Integer id) {
        String userId=template.opsForValue().get(request.getSessionId());
        if(userId==null)  return "SessionId is invalid!";
        Optional<Project> optionalProject= projectRepository.findById(id);
        if(!optionalProject.isPresent()) return "Project isn't exists!";
        if(!userId.equals(optionalProject.get().getOwner().getId())) return "Wrong user!";
        return optionalProject.get().getName()+"\n"+optionalProject.get().getDescription();
    }

    @PutMapping("/{id}")
    public @ResponseBody String updateProject (@RequestBody ProjectRequest request,@PathVariable Integer id) {
        String userId=template.opsForValue().get(request.getSessionId());
        if(userId==null)  return "SessionId is invalid!";
        Optional<User> optionalUser=userRepository.findById(userId);
        if(!optionalUser.isPresent()) return "User isn't exists";
        Optional<Project> optionalProject= projectRepository.findById(id);
        if(!optionalProject.isPresent()) return "Project isn't exists!";
        if(!userId.equals(optionalProject.get().getOwner().getId())) return "Wrong user!";
        Date date=new Date();
        Project project=new Project();
        project.setId(id);
        project.setLastModified(date);
        project.setOwner(optionalUser.get());
        project.setDescription(request.getProject().getDescription());
        project.setName(request.getProject().getName());
        projectRepository.save(project);
        return "Saved";
    }


    @DeleteMapping(path="/{id}")
    public @ResponseBody String invalidateSessionId(@RequestParam String sessionId,@PathVariable Integer id) {
        String userId=template.opsForValue().get(sessionId);
        if(userId==null) return "SessionId is invalid!";
        Optional<Project> optionalProject= projectRepository.findById(id);
        if(!optionalProject.isPresent()) return "Project isn't exists!";
        if(!userId.equals(optionalProject.get().getOwner().getId())) return "Wrong user!";
        projectRepository.delete(optionalProject.get());
        return optionalProject.get().getId() +" is deleted!";
    }
}
