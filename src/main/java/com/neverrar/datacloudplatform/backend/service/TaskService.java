package com.neverrar.datacloudplatform.backend.service;

import com.neverrar.datacloudplatform.backend.error.InvalidSessionIdError;
import com.neverrar.datacloudplatform.backend.error.PermissionDeniedError;
import com.neverrar.datacloudplatform.backend.error.ProjectNotExistedError;
import com.neverrar.datacloudplatform.backend.error.TaskNotExistedError;
import com.neverrar.datacloudplatform.backend.model.*;
import com.neverrar.datacloudplatform.backend.repository.ProjectRepository;
import com.neverrar.datacloudplatform.backend.repository.TaskRepository;
import com.neverrar.datacloudplatform.backend.repository.TestRepository;
import com.neverrar.datacloudplatform.backend.repository.UserRepository;
import com.neverrar.datacloudplatform.backend.request.CreateTaskRequest;
import com.neverrar.datacloudplatform.backend.request.UpdateTaskRequest;
import com.neverrar.datacloudplatform.backend.util.Request;
import com.neverrar.datacloudplatform.backend.util.Result;
import com.neverrar.datacloudplatform.backend.view.AllTaskByProject;
import com.neverrar.datacloudplatform.backend.view.AllTestByTask;
import com.neverrar.datacloudplatform.backend.view.TaskInformation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;
import java.util.Set;

@Service
public class TaskService {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private ProjectRepository projectRepository;

    @Autowired
    private TaskRepository taskRepository;

    @Autowired
    private TestRepository testRepository;

    public Result<TaskInformation> addNewTask (CreateTaskRequest body, User user) {
        Optional<Project> optionalProject=projectRepository.findById(body.getProjectId());
        if(!optionalProject.isPresent()) {
            return Result.wrapErrorResult(new ProjectNotExistedError());
        }
        if(user.getRole().equals(0)&& !optionalProject.get().getOwner().getId().equals(user.getId())) {
            return Result.wrapErrorResult(new PermissionDeniedError());
        }
        Task task=new Task();
        task.setOwner(user);
        task.setProject(optionalProject.get());
        task.setDescription(body.getDescription());
        task.setName(body.getName());
        task.setScene(body.getScene());
        taskRepository.save(task);
        return Result.wrapSuccessfulResult(new TaskInformation(task));
    }

    public Result<TaskInformation> getTask (User user, Integer id) {
        Optional<Task> optionalTask= taskRepository.findById(id);
        if(!optionalTask.isPresent()) {
            return Result.wrapErrorResult(new ProjectNotExistedError());
        }
        if(user.getRole().equals(0)&& !user.getId().equals(optionalTask.get().getOwner().getId())) {
            return Result.wrapErrorResult(new PermissionDeniedError());
        }
        return Result.wrapSuccessfulResult(new TaskInformation(optionalTask.get()));
    }

    @Transactional
    public Result<TaskInformation> updateTask (UpdateTaskRequest body, Integer id, User user) {
        Optional<Task> optionalTask=taskRepository.findById(id);
        if(!optionalTask.isPresent()) {
            return Result.wrapErrorResult(new TaskNotExistedError());
        }
        if(user.getRole().equals(0)&& !optionalTask.get().getOwner().getId().equals(user.getId())) {
            return Result.wrapErrorResult(new PermissionDeniedError());
        }
        Task task=optionalTask.get();
        task.setScene(body.getScene());
        task.setName(body.getName());
        task.setDescription(body.getDescription());
        taskRepository.save(task);
        return Result.wrapSuccessfulResult(new TaskInformation(task));
    }

    @Transactional
    public Result<String> deleteTask(User user,Integer id) {
        Optional<Task> optionalTask=taskRepository.findById(id);
        if(!optionalTask.isPresent()) {
            return Result.wrapErrorResult(new TaskNotExistedError());
        }
        if(user.getRole().equals(0)&& !optionalTask.get().getOwner().getId().equals(user.getId())) {
            return Result.wrapErrorResult(new PermissionDeniedError());
        }
        taskRepository.delete(optionalTask.get());
        return Result.wrapSuccessfulResult("Deleted");
    }

    public Result<AllTestByTask> getOwnedTest (User user, Integer id,Integer testerId) {
        Optional<Task> optionalTask= taskRepository.findById(id);
        if(!optionalTask.isPresent()) {
            return Result.wrapErrorResult(new TaskNotExistedError());
        }
        if(user.getRole().equals(0)&& !user.getId().equals(optionalTask.get().getOwner().getId())) {
            return Result.wrapErrorResult(new PermissionDeniedError());
        }
        Tester tester=new Tester();
        tester.setId(testerId);
        AllTestByTask result=new AllTestByTask(testRepository.findAllByTesterAndTask(tester,optionalTask.get()));
        result.setTaskId(optionalTask.get().getId());
        return Result.wrapSuccessfulResult(result);

    }
}
