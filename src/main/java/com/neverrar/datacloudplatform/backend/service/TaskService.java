package com.neverrar.datacloudplatform.backend.service;

import com.neverrar.datacloudplatform.backend.error.InvalidSessionIdError;
import com.neverrar.datacloudplatform.backend.error.PermissionDeniedError;
import com.neverrar.datacloudplatform.backend.error.ProjectNotExistedError;
import com.neverrar.datacloudplatform.backend.error.TaskNotExistedError;
import com.neverrar.datacloudplatform.backend.model.Project;
import com.neverrar.datacloudplatform.backend.model.Task;
import com.neverrar.datacloudplatform.backend.model.Test;
import com.neverrar.datacloudplatform.backend.model.User;
import com.neverrar.datacloudplatform.backend.repository.ProjectRepository;
import com.neverrar.datacloudplatform.backend.repository.TaskRepository;
import com.neverrar.datacloudplatform.backend.repository.UserRepository;
import com.neverrar.datacloudplatform.backend.util.Request;
import com.neverrar.datacloudplatform.backend.util.Result;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;
import java.util.Set;

@Service
public class TaskService {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private ProjectRepository projectRepository;

    @Autowired
    private TaskRepository taskRepository;

    public Result<String> addNewTask (Task task,String userId) {
        Optional<Project> optionalProject=projectRepository.findById(task.getProject());
        if(!optionalProject.isPresent()) return Result.wrapErrorResult(new ProjectNotExistedError());
        if(!optionalProject.get().getOwner().equals(userId))
            return Result.wrapErrorResult(new PermissionDeniedError());
        User user=new User();
        user.setId(userId);
        task.setOwner(user);
        task.setId(null);
        task.setProject(optionalProject.get());
        taskRepository.save(task);
        return Result.wrapSuccessfulResult("Saved");
    }

    public Result<Task> getTask (String userId,Integer id) {
        Optional<Task> optionalTask= taskRepository.findById(id);
        if(!optionalTask.isPresent()) return Result.wrapErrorResult(new ProjectNotExistedError());
        if(!userId.equals(optionalTask.get().getOwner())) return Result.wrapErrorResult(new PermissionDeniedError());
        return Result.wrapSuccessfulResult(optionalTask.get());
    }

    public Result<Set<Task>> getAllTask (String  userId, Integer projectId) {
        Optional<Project> optionalProject=projectRepository.findById(projectId);
        if(!optionalProject.isPresent()) return Result.wrapErrorResult(new ProjectNotExistedError());
        if(!optionalProject.get().getOwner().equals(userId))
            return Result.wrapErrorResult(new PermissionDeniedError());
        return Result.wrapSuccessfulResult(optionalProject.get().taskSetInstance());
    }

    public Result<Task> updateTask (Task task, Integer id,String userId) {
        Optional<Task> optionalTask=taskRepository.findById(id);
        if(!optionalTask.isPresent()) return Result.wrapErrorResult(new TaskNotExistedError());
        if(!optionalTask.get().getOwner().equals(userId))
            return Result.wrapErrorResult(new PermissionDeniedError());
        task.setId(id);
        Project project=new Project();
        project.setId(optionalTask.get().getProject());
        task.setProject(project);
        User user=new User();
        user.setId(userId);
        task.setOwner(user);
        taskRepository.save(task);
        return Result.wrapSuccessfulResult(task);
    }


    public Result<String> deleteTask(String userId,Integer id) {
        Optional<Task> optionalTask=taskRepository.findById(id);
        if(!optionalTask.isPresent()) return Result.wrapErrorResult(new TaskNotExistedError());
        if(!optionalTask.get().getOwner().equals(userId))
            return Result.wrapErrorResult(new PermissionDeniedError());
        for(Test test:optionalTask.get().testSetInstance()){
                      //mongoDB级联删除
        }
        taskRepository.delete(optionalTask.get());
        return Result.wrapSuccessfulResult("Deleted");
    }
}
